---Original script belongs to blog: added metatable to env
local function displayImage(imageLength, image)
	--	Does not position the image or handle page/line counts
	local label = Instance.new("ImageLabel")
	label.Size = UDim2.new(1, 0, 0.05 * imageLength, 0)
	label.ZIndex = 5
	label.BorderSizePixel = 0
	task.spawn(preloadImageOnLabelAsync, image, label)
	label.Parent = getFrame(page)
	return label
end
local function displayImageOnLine(imageLength, image)
	if not onEmptyLine() then
		advanceLine()
	end
	if not imageFitsOnPage(imageLength) then
		advancePage()
	end
	local label = displayImage(imageLength, image)
	label.Position = UDim2.new(0, 0, 0.05 * line - 0.05, 0)
	advanceLine(imageLength)
	return label
end
local function fitStringToLine(text)
	--	If the current line already has content, appends text to it with a space between
	--	Returns the text that didn't fit or nil if it all fit
	return fitStringToLabel(text, getFrame(page)[tostring(line)])
end
local function fitStringToLineAllOrNothing(text)
	--	If the current line already has content, appends text to it with a space between, but only if all of text fits
	--	If the current line is empty, acts like fitStringToLine
	--	In either case, text not added will be returned (if there is any)
	local frame = getFrame(page)
	local label = frame[tostring(line)]
	if label.Text == "" then
		return fitStringToLabel(text, label)
	end
	local prevText = label.Text
	label.Text = prevText .. " " .. text
	if label.TextFits then return end
	label.Text = prevText
	return text
end

local ratio = 8.5 / 11
local function sizeMainFrame()
	mainFrame.Size = UDim2.new(UDim.new(0, mainFrame.AbsoluteSize.Y * ratio * 2 + 32), mainFrame.Size.Y) -- * 2 because there are 2 pages and + 12 due to space between pages in middle of screen and + 20 due to page margins (5 on each side * 2 pages)
end

local function colorsSimilar(a, b)
	return math.abs(a.R - b.R) < 0.2
		and math.abs(a.G - b.G) < 0.2
		and math.abs(a.B - b.B) < 0.2
end
local black = Color3.new()
local white = Color3.new(1, 1, 1)
local function oppositeBlackWhite(c)
	return (c.R > 0.5 or c.G > 0.5 or c.B > 0.5) and black or white
end
local function handleStrokeColor(textColor, strokeColor)
	return colorsSimilar(textColor, strokeColor)
		and oppositeBlackWhite(textColor)
		or strokeColor
end

local originalMainFramePosition = mainFrame.Position
local function getWordsFromBookWords(bookWords)
	local words = {}
	for _, v in ipairs(bookWords) do
		if v ~= "" then
			for word in string.gmatch(v, "%S+") do
				table.insert(words, word)
			end
		end
	end
	return words
end

local open = Instance.new("BindableFunction")
open.Name = "OpenBook"
open.Parent = ReplicatedStorage
local invokeNum = 0
open.OnInvoke = function(model, cover, authorsNote, bookWords)
	SFX.BookOpen:Play()
	local book = Books:FromObj(model)
	local titleTextColor = model.TitleColor.Value
	local titleStrokeColor = handleStrokeColor(titleTextColor, model.TitleOutlineColor.Value)
	events.bookOpened:Fire()
	mainFrame.Position = UDim2.new(-2, 0, 0, 0) -- Put it off screen while we load it
	sizeMainFrame()
	mainFrame.Visible = true
	mainFrame.Pg1.Cover.Image = cover
	mainFrame.Pg1.BackgroundColor3 = model.Color
	mainFrame.Pg2.Title.Text = book.Title
	mainFrame.Pg2.Title.TextColor3 = titleTextColor
	mainFrame.Pg2.Title.TextStrokeColor3 = titleStrokeColor
	mainFrame.Pg2.Author.Text = "By: " .. book.AuthorLine
	mainFrame.Pg2.Author.TextColor3 = titleTextColor
	mainFrame.Pg2.Author.TextStrokeColor3 = titleStrokeColor
	mainFrame.Pg2.PublishedOn.Text = "Published On: " .. book.PublishDate
	mainFrame.Pg2.Librarian.Text = "Librarian: " .. book.Librarian
	mainFrame.Pg2.AuthorsNote.Text = authorsNote

	fontSize = (mainFrame.AbsoluteSize.Y / 20) * 0.6
	
	local frames = {}
	
	function frames.record()
		frames.__record = {}
	end
	
	function frames.stop()
		if frames:IsA("ImageLabel") then 
			frames.__TextSize = {}
			local text = table.concat(frames.__TextSize)
			frames.__record = nil
			return text 
		end
	end
	
	function frames.frames(str)
		if frames:IsA("TextLabel") then
			frames.__fontSize = {}
		elseif frames.__record then
			table.insert(frames.__record, str)
		end
	end
	
	setmetatable(doc, {__call=
							function(self, ...)
								return self.frames(...)
							end})
	return frames
		
	local words = getWordsFromBookWords(bookWords)
	local numWords = #words
	page = 3
	line = 1
	kill = false
	for i, v in ipairs(words) do
		local isText
		if string.sub(v, 1, 1) == "/" then
			-- Note: In the if/elseif branches below, related commands are grouped together and otherwise sorted based on approximate usage frequency (but with quick-to-check commands like "/line" first, except for "/kill", which is put last as that's only used in one book).
			if v == "/line" then
				advanceLine()
			elseif v == "/dline" then
				advanceLine(2)
			elseif v == "/page" then
				advancePage()
			elseif v == "/turn" then
				advancePage(onLeftPage() and 2 or 1)
			elseif string.sub(v, 1, 6) == "/image" then
				local imageLength = math.min(20, tonumber(string.sub(v, 7, 8)))
				local image = string.sub(v, 9)
				displayImageOnLine(imageLength, image)
			elseif string.sub(v, 1, 12) == "/retainImage" then
				local imageLength = math.min(15, tonumber(string.sub(v, 13, 14)))
				local image = string.sub(v, 15)
				local startLine = line
				local label = displayImageOnLine(imageLength, image)
				local sizeY = label.AbsoluteSize.Y
				label.Size = UDim2.new(0, sizeY, 0.05 * imageLength, 0)
				label.Position = UDim2.new(0.5, -sizeY / 2, 0.05 * startLine - 0.05, 0)
			elseif string.sub(v, 1, 9) == "/endImage" then
				if i == numWords then
					local imageLength = tonumber(string.sub(v, 10, 11))
					if canPutImageOnRightWithoutTurningPage(imageLength) then
						if onLeftPage() then
							advancePage()
						end
						local image = string.sub(v, 12)
						displayImage(imageLength, image)
					end
				end
			elseif string.sub(v, 1, 10) == "/fillImage" then
				local imageLength = tonumber(string.sub(v, 11, 12))
				if canPutImageOnRightWithoutTurningPage(imageLength) then
					if onLeftPage() then
						advancePage()
					end
					local image = string.sub(v, 13)
					displayImage(imageLength, image)
				end
				advancePage()
			elseif string.sub(v, 1, 6) == "/hline" then
				if not onEmptyLine() then
					advanceLine()
				end
				fitStringToLine(string.rep(string.sub(v, 7, 7), 120))
			elseif v == "/kill" then
				kill = true
			else
				isText = true
			end
		else
			isText = true
		end
		if isText then
			local textLeft = fitStringToLineAllOrNothing(v)
			while textLeft do
				advanceLine()
				textLeft = fitStringToLine(textLeft)
			end
		end
	end
	if onEmptyPage() then
		page -= 1
	end
	numPagePairs = math.ceil(page / 2)

	-- Force update of frame positions/sizes (Roblox bug workaround)
	local correctSize = mainFrame.Size
	mainFrame.Size = UDim2.new(UDim.new(0, correctSize.X.Offset - 1), correctSize.Y)

	-- if we've started processing another book, don't restore the gui (using invokeNum to keep track)
	invokeNum += 1
	local num = invokeNum
	task.spawn(function() -- This is a work-around for how Roblox doesn't position/size things correctly sometimes
		wait() -- Note: Heartbeat:Wait() is not long enough
		if num ~= invokeNum then return end
		mainFrame.Size = correctSize
		for i = 3, #frames do
			frames[i].Visible = false
		end
		leftPage, rightPage = nil, nil
		setPagePair(1)
		mainFrame.Position = originalMainFramePosition -- Restore it to correct position now that everything has the correct size
	end)
end
