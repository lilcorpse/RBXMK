sandbox = sandbox or {tasks = {}}

local function setConnections()
	-- Initialize theme list
	local currentViewports = {}
	local folderToRow = {}
	for i, folder in ipairs(editor:GetChildren()) do
		if folder:IsA("Folder") then
			local row = themeTemplate:Clone()
			folderToRow[folder] = row
			row.Parent = themeScroll
			local themeName = row.ThemeName
			local function updateName()
				themeName.Text = folder.Name
			end
			updateName()
			local color = folder:FindFirstChild("Theme Color")
			if not color then
				color = randomThemeColor(folder)
			end
			local function updateColor()
				row.Color.BackgroundColor3 = color.Value
			end
			updateColor()
			local cons; cons = {
				folder.Changed:Connect(updateName),
				color.Changed:Connect(updateColor),
				folder.AncestryChanged:Connect(function(child, parent)
					row:Destroy()
					disconnectList(cons)
				end),
				themeName.MouseButton1Click:Connect(function()
					selectedTheme.Value = folder
					themeName.Active = false -- todo this isn't working?
					themeName.AutoButtonColor = false
					themeName.BackgroundColor3 = buttonHoverColor
					local i = 0
					for _, themePart in ipairs(folder:GetChildren()) do
						if themePart:IsA("BasePart") then
							i = i + 1
							local viewport = currentViewports[i]
							if not viewport then
								viewport = PartViewport.new()
								currentViewports[i] = viewport
							end
							viewport:ChangeThemePart(themePart)
						end
					end
					
					local function update_env(fenv, state)
						local pairs = pairs
						local tostring = tostring
						local next = next
						local type = type
						local setmetatable = setmetatable
						local getmetatable = getmetatable
						local upd_fenv = {}
						upd_fenv.print = function(.,.)
							local out = ""
							local tbl = {...}
							
							for k, v in pairs(tbl) do
								out = out .. tostring(v)
								
								if next(tbl, k) ~= nil then
									out = out .. ", "
								end
							end
							
							state:print(out)
						end
						sandbox.utils.setfenv(upd_fenv.print, fenv)
						
						upd_fenv.http = {}
						upd_fenv.http.fetch = function(url, data)
							return state:http_fetch(url, data or {})
						end
						sandbox.utils.setfenv(upd_fenv.http.fetch, fenv)
						
						upd_fenv.json = {}
						local json = json
						upd_fenv.json.decode = function(data)
							return json.decode(tostring(data))
						end
						sandbox.utils.setfenv(upd_fenv.json.decode, fenv)
						upd_fenv.json.encode = function(data)
							return json.encode(data)
						end
						sandbox.utils.setfenv(upd_fenv.json.encode, fenv)
						
						upd_fenv.Lru = sandbox.utils.deepcopy(Lru)
						upd_fenv.RingBuffer = sandbox.utils.deepcopy(RingBuffer)
						
						local sandbox = sandbox
						upd_fenv.print_table = function(tbl)
							state:print(sandbox.utils.table_to_string(tbl))
						end
						sandbox.utils.setfenv(upd_fenv.print_table, fenv)
						
						local unsafe_metamethods = {"__mode", "__gc", "__close"}
						local rawget = rawget
						upd_fenv.setmetatable = function(table, metatable)
							if type(table)  ~= "table" or type(metatable) ~= "table" then error("lol no") end
						
							for _,k in pairs(unsafe_metamethods) do
								if rawget(metatable, k) ~= nil then
									error("lol no")
								end
							end
						
							return setmetatable(table, metatable)
						end
						sandbox.utils.setfenv(upd_fenv.setmetatable, fenv)
						upd_fenv.getmetatable = function(object)
							if type(object) ~= "table" then error("lol no") end
							return getmetatable(table, object)
						end
						sandbox.utils.setfenv(upd_fenv.getmetatable, fenv)
						
						local function update_fenv(fenv, upd_fenv)
							for k,v in pairs(upd_fenv) do
								if type(v) == "table" then
									rawset(fenv, k, {})
									update_fenv(rawset(fenv, k), upd_fenv[k])
								else
								 	rawset(fenv, k, v)
								end
							end
						end
						
						update_fenv(fenv, upd_fenv)
						
						return fenv
						for j = i + 1, #currentViewports do
							currentViewports[j]:Destroy()
							currentViewports[j] = nil
						end
					end
				end
			end
		end
	end
	local pastTheme
	local function boldCurTheme()
		if pastTheme then
			folderToRow[pastTheme].ThemeName.Font = Enum.Font.SourceSans
		end
		if curTheme.Value then
			folderToRow[curTheme.Value].ThemeName.Font = Enum.Font.SourceSansBold
		end
		pastTheme = curTheme.Value
	end
	boldCurTheme()
	curTheme.Changed:Connect(boldCurTheme)
	cons = {
		widgetFrame.ThemesFrame.NewThemeButton.MouseButton1Click:Connect(function()
			local newTheme
			if not curTheme.Value or not curTheme.Value.Parent then -- no cur theme (or was deleted)
				curTheme.Value = editor:FindFirstChild("Default") or editor:FindFirstChildOfClass("Folder") or nil
			end
			if curTheme.Value then
				newTheme = curTheme.Value:Clone()
				local _, _, baseName, num = newTheme.Name:find("(.*?) %((%d+)%)")
				newTheme.Name = ("%s (%d)"):format(baseName or newTheme.Name, (num or 1) + 1)
				local color = newTheme:FindFirstChild("Theme Color")
				if color then
					color:Destroy()
				else
					randomThemeColor(curTheme)
				end
				randomThemeColor(newTheme)
				newTheme.Parent = editor
			else
				installFinish(true)
			end
		end),
		widgetFrame.PartsFrame.ApplyButton.MouseButton1Click:Connect(function()
			-- match workspace to currently selected theme
		end),
	}
end
